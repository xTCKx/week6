---
- name: Update package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install prerequisites for Docker repository
  apt:
    name:
      - ca-certificates
      - curl
    state: present

- name: Create directory for Docker GPG key
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"

- name: Download Docker GPG key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: "0644"

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch={{ ansible_architecture | replace('x86_64', 'amd64') | replace('aarch64', 'arm64') }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker

- name: Update apt cache after adding Docker repository
  apt:
    update_cache: yes

- name: Install Docker packages
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present

- name: Ensure Docker service is started and enabled
  service:
    name: docker
    state: started
    enabled: yes

- name: Add user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  when: ansible_user is defined

- name: Create docker compose directory
  file:
    path: "{{ docker_compose_dir }}"
    state: directory
    owner: "{{ ansible_user | default('root') }}"
    group: "{{ ansible_user | default('root') }}"
    mode: "0755"

- name: Copy docker compose file
  copy:
    src: "{{ compose_file_src }}"
    dest: "{{ docker_compose_dir }}/docker-compose.yml"
    owner: "{{ ansible_user | default('root') }}"
    group: "{{ ansible_user | default('root') }}"
    mode: "0644"
  notify: Restart docker

- name: Deploy Docker Compose stack
  community.docker.docker_compose_v2:
    project_src: "{{ docker_compose_dir }}"
    state: present
  become: true
  # when: docker_compose_content is defined and docker_compose_deploy | default(true)

- name: Verify services are running
  command: docker compose ps
  args:
    chdir: "{{ docker_compose_dir }}"
  register: compose_ps
  changed_when: false

- name: Display running services
  debug:
    msg: "{{ compose_ps.stdout_lines }}"
